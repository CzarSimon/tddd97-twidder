# -*- coding: utf-8 -*-
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException
from selenium.common.exceptions import NoAlertPresentException
import unittest, time, re

class UserFunctionalityPython(unittest.TestCase):
    def setUp(self):
        self.driver = webdriver.Firefox()
        self.driver.implicitly_wait(30)
        self.base_url = "http://127.0.0.1:5000/"
        self.verificationErrors = []
        self.accept_next_alert = True
    
    def test_user_functionality_python(self):
        driver = self.driver
        driver.find_element_by_id("new-message").clear()
        driver.find_element_by_id("new-message").send_keys("First post")
        driver.find_element_by_id("new-message-form").submit()
        driver.find_element_by_link_text("Wall").click()
        driver.find_element_by_link_text("Search").click()
        driver.find_element_by_id("search-bar").clear()
        driver.find_element_by_id("search-bar").send_keys("mikael.lietha@gmail.com")
        driver.find_element_by_id("submit-search-form").submit()
        driver.find_element_by_id("new-message").clear()
        driver.find_element_by_id("new-message").send_keys("First post from Selenium!")
        driver.find_element_by_id("new-message-form").submit()
        driver.find_element_by_link_text("Profile").click()
        driver.find_element_by_link_text("Search").click()
        driver.find_element_by_id("search-bar").clear()
        driver.find_element_by_id("search-bar").send_keys("thuglife@gmail.com")
        driver.find_element_by_id("submit-search-form").submit()
        driver.find_element_by_id("new-message").clear()
        driver.find_element_by_id("new-message").send_keys("Tjenare!")
        driver.find_element_by_id("new-message-form").submit()
        driver.find_element_by_link_text("Profile").click()
        driver.find_element_by_id("password-button").click()
        driver.find_element_by_css_selector("input.change-password").clear()
        driver.find_element_by_css_selector("input.change-password").send_keys("12345")
        driver.find_element_by_xpath("(//input[@type='password'])[2]").clear()
        driver.find_element_by_xpath("(//input[@type='password'])[2]").send_keys("123456")
        driver.find_element_by_id("password-button").click()
        driver.find_element_by_id("logout-li").click()
        driver.find_element_by_id("email-LI").clear()
        driver.find_element_by_id("email-LI").send_keys("Mikael@hotmail.com")
        driver.find_element_by_id("password-LI").clear()
        driver.find_element_by_id("password-LI").send_keys("12345")
        driver.find_element_by_id("login-button").click()
        driver.find_element_by_id("password-LI").clear()
        driver.find_element_by_id("password-LI").send_keys("123456")
        driver.find_element_by_id("login-button").click()
        driver.find_element_by_link_text("Wall").click()
        driver.find_element_by_id("new-message").clear()
        driver.find_element_by_id("new-message").send_keys("Changed password works! (Y)")
        driver.find_element_by_id("new-message-form").submit()
        # ERROR: Caught exception [ERROR: Unsupported command [selectWindow | null | ]]
        driver.find_element_by_link_text("About").click()
        driver.find_element_by_id("logout-li").click()
    
    def is_element_present(self, how, what):
        try: self.driver.find_element(by=how, value=what)
        except NoSuchElementException, e: return False
        return True
    
    def is_alert_present(self):
        try: self.driver.switch_to_alert()
        except NoAlertPresentException, e: return False
        return True
    
    def close_alert_and_get_its_text(self):
        try:
            alert = self.driver.switch_to_alert()
            alert_text = alert.text
            if self.accept_next_alert:
                alert.accept()
            else:
                alert.dismiss()
            return alert_text
        finally: self.accept_next_alert = True
    
    def tearDown(self):
        self.driver.quit()
        self.assertEqual([], self.verificationErrors)

if __name__ == "__main__":
    unittest.main()
